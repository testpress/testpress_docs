"use strict";(self.webpackChunktestpress_docs=self.webpackChunktestpress_docs||[]).push([[704],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>m});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=t.createContext({}),s=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=s(a),m=o,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||r;return a?t.createElement(f,l(l({ref:n},p),{},{components:a})):t.createElement(f,l({ref:n},p))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var d={};for(var i in n)hasOwnProperty.call(n,i)&&(d[i]=n[i]);d.originalType=e,d.mdxType="string"==typeof e?e:o,l[1]=d;for(var s=2;s<r;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},163:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>s});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:1},l="Offline Downloads",d={unversionedId:"video-embedding/player-sdk/android-native-sdk/offline-downloads",id:"video-embedding/player-sdk/android-native-sdk/offline-downloads",title:"Offline Downloads",description:"We'll explore the workflow in this document.The Sample Android App on Github provides code examples for a typical use case.",source:"@site/docs/video-embedding/player-sdk/android-native-sdk/offline-downloads.md",sourceDirName:"video-embedding/player-sdk/android-native-sdk",slug:"/video-embedding/player-sdk/android-native-sdk/offline-downloads",permalink:"/docs/video-embedding/player-sdk/android-native-sdk/offline-downloads",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"videoEmbeddingSidebar",previous:{title:"Getting Started",permalink:"/docs/video-embedding/player-sdk/android-native-sdk/getting-started"}},i={},s=[{value:"Enable Download support",id:"enable-download-support",level:2},{value:"Creating a TpStreamsDownloadManager",id:"creating-a-tpstreamsdownloadmanager",level:2},{value:"Get list of downloaded media",id:"get-list-of-downloaded-media",level:4},{value:"Delete",id:"delete",level:4},{value:"Pause",id:"pause",level:4},{value:"Resume",id:"resume",level:4},{value:"Cancel",id:"cancel",level:4},{value:"Playing downloaded media",id:"playing-downloaded-media",level:2}],p={toc:s};function c(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"offline-downloads"},"Offline Downloads"),(0,o.kt)("p",null,"We'll explore the workflow in this document.The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/testpress/sample-android-app"},"Sample Android App")," on Github provides code examples for a typical use case."),(0,o.kt)("h2",{id:"enable-download-support"},"Enable Download support"),(0,o.kt)("p",null,"Create TpInitParams with .enableDownloadSupport(true) to enable download support."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'var parameters = TpInitParams.Builder()\n    .setVideoId(videoId)\n    .setAccessToken(accessToken)\n    .setOrgCode("your_subdomain") // demo for demo.testpress.in\n    .enableDownloadSupport(true)\n    .build()\n')),(0,o.kt)("h2",{id:"creating-a-tpstreamsdownloadmanager"},"Creating a TpStreamsDownloadManager"),(0,o.kt)("p",null,"The following code snippet demonstrates how to instantiate a TpStreamsDownloadManager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val tpStreamDownloadManager : TpStreamDownloadManager = TpStreamDownloadManager(activityContext)\n")),(0,o.kt)("p",null,"Using this TpStreamDownloadManager we can get a list of downloaded media and the following media operations to delete, pause, resume, and cancel."),(0,o.kt)("h4",{id:"get-list-of-downloaded-media"},"Get list of downloaded media"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val downloads : LiveData<List<OfflineVideoInfo>?> = tpStreamDownloadManager.getAllDownloads()\n")),(0,o.kt)("p",null,"It will return a list of OfflineVideoInfo in LiveData to monitor the download progress use ViewModel and observe."),(0,o.kt)("h4",{id:"delete"},"Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"tpStreamDownloadManager.deleteDownload(offlineVideoInfo)\n")),(0,o.kt)("h4",{id:"pause"},"Pause"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"tpStreamDownloadManager.pauseDownload(offlineVideoInfo)\n")),(0,o.kt)("h4",{id:"resume"},"Resume"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"tpStreamDownloadManager.resumeDownload(offlineVideoInfo)\n")),(0,o.kt)("h4",{id:"cancel"},"Cancel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"tpStreamDownloadManager.cancelDownload(offlineVideoInfo)\n")),(0,o.kt)("h2",{id:"playing-downloaded-media"},"Playing downloaded media"),(0,o.kt)("p",null,"Create offline params and pass them to player activity via intent to play an offline video."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val intent = Intent(activityContext,PlayerActivity::class.java)\nintent.putExtra(TP_OFFLINE_PARAMS,TpInitParams.createOfflineParams(offlineVideoInfo.videoId))\nstartActivity(intent)\n")))}c.isMDXComponent=!0}}]);